import { useState, useEffect, useRef } from "react";

const GenerateStory = () => {
  // State to store the conversation messages (story parts and user choices)
  const [messages, setMessages] = useState([]);
  // State to hold the current user input for the initial prompt
  const [currentInput, setCurrentInput] = useState("");
  // State to manage loading indicator visibility
  const [isLoading, setIsLoading] = useState(false);
  // State to store the full story history for context in API calls
  const [storyContext, setStoryContext] = useState("");
  // State to hold the choices generated by the API for the current story segment
  const [currentChoices, setCurrentChoices] = useState([]);
  // Ref to automatically scroll the chat window to the bottom
  const messagesEndRef = useRef(null);

  // Effect to scroll to the latest message whenever messages state changes
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  /**
   * Handles the submission of the initial user prompt.
   * @param {Event} e - The form submission event.
   */
  const handleInitialPromptSubmit = async (e) => {
    e.preventDefault();
    if (!currentInput.trim()) return;

    // Add the user's initial prompt to messages
    setMessages((prev) => [...prev, { type: "user", text: currentInput }]);
    setStoryContext(currentInput); // Initialize story context with the prompt
    setIsLoading(true); // Show loading indicator
    setCurrentInput(""); // Clear the input field

    try {
      // Call the Gemini API to generate the first part of the story
      await generateStoryPart(currentInput, null);
    } catch (error) {
      console.error("Error generating initial story:", error);
      setMessages((prev) => [
        ...prev,
        {
          type: "system",
          text: "Oops! Something went wrong. Please try again.",
        },
      ]);
    } finally {
      setIsLoading(false); // Hide loading indicator
    }
  };

  /**
   * Handles the user clicking on a choice button.
   * @param {string} choiceText - The text of the chosen option.
   */
  const handleChoiceClick = async (choiceText) => {
    // Add the user's chosen option to messages
    setMessages((prev) => [...prev, { type: "user_choice", text: choiceText }]);
    setCurrentChoices([]); // Clear choices while new story part is generating
    setIsLoading(true); // Show loading indicator

    try {
      // Append the choice to the story context for the next API call
      const updatedContext = storyContext + "\nUser chooses: " + choiceText;
      setStoryContext(updatedContext);

      // Call the Gemini API to continue the story based on the choice
      await generateStoryPart(updatedContext, choiceText);
    } catch (error) {
      console.error("Error generating next story part:", error);
      setMessages((prev) => [
        ...prev,
        {
          type: "system",
          text: "Oops! Failed to continue the story. Please try again.",
        },
      ]);
    } finally {
      setIsLoading(false); // Hide loading indicator
    }
  };

  /**
   * Calls the Gemini API to generate a new story part and choices.
   * @param {string} currentStoryContext - The full conversation history/story context.
   * @param {string|null} userChoice - The user's last chosen option, or null for initial prompt.
   */
  const generateStoryPart = async (currentStoryContext, userChoice) => {
    // Construct the prompt for the Gemini API
    let promptText = `You are a "Choose Your Own Adventure" story generator.
        Continue the story based on the context provided. After each story segment,
        always provide exactly 2 or 3 distinct choices for the user to make.
        Format your response as follows:
        ---STORY_START---
        [Your generated story segment here, minimum 2-3 sentences. Make it engaging!]
        ---CHOICES_START---
        1. [Choice Option 1]
        2. [Choice Option 2]
        3. [Choice Option 3 - Optional, provide 2 or 3 total]
        ---END---

        Current Story Context:
        ${currentStoryContext}`;

    if (userChoice) {
      promptText += `\nUser's last choice: "${userChoice}"`;
    } else {
      promptText += `\nThis is the beginning of the story.`;
    }

    // Construct the payload for the Gemini API call
    const payload = {
      contents: [{ parts: [{ text: promptText }] }],
      generationConfig: {
        // Adjust parameters for desired creativity and coherence
        temperature: 0.9,
        topK: 40,
        topP: 0.9,
        maxOutputTokens: 500,
      },
    };

    const apiKey = "apikey";
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

    try {
      const response = await fetch(apiUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          `API error: ${response.status} - ${
            errorData.error.message || response.statusText
          }`
        );
      }

      const result = await response.json();

      if (
        result.candidates &&
        result.candidates.length > 0 &&
        result.candidates[0].content &&
        result.candidates[0].content.parts &&
        result.candidates[0].content.parts.length > 0
      ) {
        const rawText = result.candidates[0].content.parts[0].text;
        // Parse the raw text into story content and choices
        const { story, choices } = parseGeminiResponse(rawText);

        // Update the story context with the new story part
        setStoryContext((prev) => prev + "\n" + story);

        // Add the generated story part to messages
        setMessages((prev) => [...prev, { type: "story", text: story }]);
        // Set the new choices for the user to pick from
        setCurrentChoices(choices);
      } else {
        console.error("Gemini API response structure unexpected:", result);
        setMessages((prev) => [
          ...prev,
          {
            type: "system",
            text: "The story generator responded in an unexpected way. Please try another prompt.",
          },
        ]);
        setCurrentChoices([]); // No choices if response is malformed
      }
    } catch (error) {
      console.error("Failed to fetch from Gemini API:", error);
      setMessages((prev) => [
        ...prev,
        {
          type: "system",
          text: "Could not connect to the story generator. Check your internet connection or try again later.",
        },
      ]);
      setCurrentChoices([]);
    }
  };

  /**
   * Parses the raw text response from the Gemini API to extract story and choices.
   * Assumes the format defined in the prompt: ---STORY_START--- ... ---CHOICES_START--- ... ---END---
   * @param {string} rawText - The raw text response from the Gemini API.
   * @returns {{story: string, choices: string[]}} - An object containing the story segment and an array of choices.
   */
  const parseGeminiResponse = (rawText) => {
    let story = "An error occurred while parsing the story.";
    let choices = [];

    // Regular expressions to extract story and choices based on defined delimiters
    const storyMatch = rawText.match(
      /---STORY_START---\s*([\s\S]*?)\s*---CHOICES_START---/
    );
    const choicesMatch = rawText.match(
      /---CHOICES_START---\s*([\s\S]*?)\s*---END---/
    );

    if (storyMatch && storyMatch[1]) {
      story = storyMatch[1].trim();
    }

    if (choicesMatch && choicesMatch[1]) {
      // Split choices by new line and filter out empty strings
      choices = choicesMatch[1]
        .split("\n")
        .map((line) => line.trim())
        .filter((line) => line.length > 0 && /^\d+\./.test(line)) // Ensure it's a numbered choice
        .map((line) => line.replace(/^\d+\.\s*/, "")); // Remove the numbering (e.g., "1. ")
    }
    return { story, choices };
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-purple-800 to-indigo-900 text-white p-4">
      <script src="https://cdn.tailwindcss.com"></script>
      <link
        href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap"
        rel="stylesheet"
      />

      {/* Custom Tailwind configuration for the Inter font and extended colors/shadows */}
      <style>{`
                body { font-family: 'Inter', sans-serif; }
                .chat-bubble-story {
                    background-color: #3f51b5; /* Deeper blue for story parts */
                    border-bottom-left-radius: 20px;
                    border-bottom-right-radius: 20px;
                    border-top-right-radius: 20px;
                }
                .chat-bubble-user {
                    background-color: #4CAF50; /* Green for user messages */
                    align-self: flex-end;
                    border-bottom-left-radius: 20px;
                    border-bottom-right-radius: 20px;
                    border-top-left-radius: 20px;
                }
                .chat-bubble-choice {
                    background-color: #FFC107; /* Amber for user choices */
                    color: #333;
                    align-self: flex-end;
                    border-bottom-left-radius: 20px;
                    border-bottom-right-radius: 20px;
                    border-top-left-radius: 20px;
                }
                .chat-bubble-system {
                    background-color: #f44336; /* Red for system messages */
                    border-bottom-left-radius: 20px;
                    border-bottom-right-radius: 20px;
                    border-top-right-radius: 20px;
                }
                .chat-choice-button {
                    background-image: linear-gradient(to right, #6A0DAD 0%, #000080 50%, #6A0DAD 100%);
                    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
                    transition: all 0.3s ease-in-out;
                    background-size: 200% auto;
                }
                .chat-choice-button:hover {
                    background-position: right center;
                    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
                }
            `}</style>

      <h1 className="text-5xl font-extrabold mb-8 drop-shadow-lg text-yellow-300">
        stor.ai
      </h1>

      <div className="w-full max-w-2xl bg-gray-800 rounded-3xl shadow-xl flex flex-col h-[70vh] md:h-[80vh] overflow-hidden border-2 border-indigo-500">
        {/* Chat Messages Display Area */}
        <div className="flex-1 p-6 overflow-y-auto space-y-4 custom-scrollbar">
          {messages.length === 0 && !isLoading && (
            <div className="text-center text-gray-400 italic mt-10">
              Enter a prompt below to start your adventure!
              <br />
              e.g., "A medieval knight goes on a quest to defeat a dragon."
            </div>
          )}
          {messages.map((msg, index) => (
            <div
              key={index}
              className={`flex ${
                msg.type === "user" || msg.type === "user_choice"
                  ? "justify-end"
                  : "justify-start"
              }`}
            >
              <div
                className={`
                                max-w-[80%] p-3 rounded-xl
                                ${
                                  msg.type === "story"
                                    ? "chat-bubble-story"
                                    : msg.type === "user"
                                    ? "chat-bubble-user"
                                    : msg.type === "user_choice"
                                    ? "chat-bubble-choice"
                                    : "chat-bubble-system"
                                }
                                text-sm md:text-base shadow-md
                            `}
              >
                {msg.text}
              </div>
            </div>
          ))}
          {isLoading && (
            <div className="flex justify-start">
              <div className="max-w-[80%] p-3 rounded-xl chat-bubble-story animate-pulse">
                Generating story...
              </div>
            </div>
          )}
          <div ref={messagesEndRef} /> {/* Scroll target */}
        </div>

        {/* Story Choices Area */}
        {currentChoices.length > 0 && !isLoading && (
          <div className="p-4 bg-gray-700 border-t border-indigo-600 grid grid-cols-1 md:grid-cols-2 gap-3">
            {currentChoices.map((choice, index) => (
              <button
                key={index}
                onClick={() => handleChoiceClick(choice)}
                className="chat-choice-button text-white font-semibold py-3 px-5 rounded-full text-sm md:text-base
                                           transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-indigo-300 focus:ring-opacity-75"
                disabled={isLoading} // Disable choices while generating
              >
                {choice}
              </button>
            ))}
          </div>
        )}

        {/* Input Form for Initial Prompt */}
        {messages.length === 0 && !isLoading && (
          <form
            onSubmit={handleInitialPromptSubmit}
            className="p-4 bg-gray-700 border-t border-indigo-600 flex gap-2"
          >
            <input
              type="text"
              value={currentInput}
              onChange={(e) => setCurrentInput(e.target.value)}
              placeholder="Type your initial story idea here..."
              className="flex-1 p-3 rounded-full bg-gray-900 text-white border border-gray-600 focus:outline-none focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 placeholder-gray-400"
              disabled={isLoading}
            />
            <button
              type="submit"
              className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-full
                                       transition duration-300 ease-in-out transform hover:scale-105 active:scale-95"
              disabled={isLoading}
            >
              Start Adventure
            </button>
          </form>
        )}
      </div>
    </div>
  );
};

export default GenerateStory;
